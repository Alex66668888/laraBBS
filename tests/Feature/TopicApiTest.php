<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\User;
use App\Models\Topic;
use Tests\Traits\ActingJWTUser;


class TopicApiTest extends TestCase
{

    // 引入 trait  ActingJWTUser
    use ActingJWTUser;

    protected $user;

    /**
     * 会在测试开始之前执行
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // 创建一个用户，测试会以该用户的身份进行测试
        $this->user = factory(User::class)->create();

    }


    /**
     * 测试发布话题
     */
    public function testStoreTopic()
    {
        $data = ['category_id' => 1, 'body' => 'test body', 'title' => 'test title'];

        // $token = \Auth::guard('api')->fromUser($this->user);
        // $response = $this->withHeaders(['Authorization' => 'Bearer '.$token])

        $response = $this->JWTActingAs($this->user)

            // 使用 $this->json 可以方便的模拟各种 HTTP 请求：
            // 第一个参数：请求的方法
            // 第二个参数：请求地址
            // 第三个参数：请求参数
            // 第四个参数：请求 Header，可以直接设置 Header，也可以利用 withHeaders 方法达到同样的目的

            ->json('POST', '/api/topics', $data);

        $assertData = [
            'category_id' => 1,
            'user_id' => $this->user->id,
            'title' => 'test title',
            'body' => clean('test body', 'user_topic_body'),
        ];

        $response->assertStatus(201)
            ->assertJsonFragment($assertData);
    }


    /**
     * 测试修改话题
     */
    public function testUpdateTopic()
    {
        $topic = $this->makeTopic();

        $editData = ['category_id' => 2, 'body' => 'edit body', 'title' => 'edit title'];

        $response = $this->JWTActingAs($this->user)
            ->json('PATCH', '/api/topics/'.$topic->id, $editData);

        $assertData= [
            'category_id' => 2,
            'user_id' => $this->user->id,
            'title' => 'edit title',
            'body' => clean('edit body', 'user_topic_body'),
        ];

        // 断言状态返回码为200 以及结果中含有 $assertData
        $response->assertStatus(200)
            ->assertJsonFragment($assertData);
    }

    /**
     * 为用户创建一个话题
     * @return mixed
     */
    protected function makeTopic()
    {
        return factory(Topic::class)->create([
            'user_id' => $this->user->id,
            'category_id' => 1,
        ]);
    }


    /**
     * 测试显示单条话题
     */
    public function testShowTopic()
    {
        // 创建一个话题
        $topic = $this->makeTopic();
        $response = $this->json('GET', '/api/topics/'.$topic->id);

        $assertData= [
            'category_id' => $topic->category_id,
            'user_id' => $topic->user_id,
            'title' => $topic->title,
            'body' => $topic->body,
        ];

        $response->assertStatus(200)
            ->assertJsonFragment($assertData);
    }

    /**
     * 测试显示所有话题列表
     */
    public function testIndexTopic()
    {
        $response = $this->json('GET', '/api/topics');

        $response->assertStatus(200)
            ->assertJsonStructure(['data', 'meta']);
    }


    /**
     * 测试删除话题
     */
    public function testDeleteTopic()
    {
        $topic = $this->makeTopic();
        $response = $this->JWTActingAs($this->user)
            ->json('DELETE', '/api/topics/'.$topic->id);
        $response->assertStatus(204);

        // 请求已经删除的话题
        $response = $this->json('GET', '/api/topics/'.$topic->id);
        $response->assertStatus(404);
    }






}
